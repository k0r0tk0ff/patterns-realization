

В пакете описывается примерение паттерна "Bridge"

Необходим для связки нескольких сущностей в одну, что то типа множественного наследования.

Описание алгоритма логики:

1) Определяется интерфейс Model, в котором присутствует декларация метода void track(String message)

2) Определяется абстрактный класс Vehicle, в котором присутствует поле Model, и конструктор для этого поля.
А также, присутствует декларация метода void track().

3) Определяется класс Car, который extend-ит Vehicle. Определяется поле с типом Model.
В кострукторе класса Car присутствует это поле типа Model. Также, в конструкторе класса Car присутствует
вызов родительского конструктора, куда передается значения этого поля типа Model.

Следует обратить внимание, что поле model типа Model мы передали в родительский класс, и им воспользовались здесь -
пишем реализацию метода @Override метода void track() -
вызывается аналогичный по названию метод у переданного через конструктор обьекта, который implement интерфейс Model.
void track() { model.track("Car ");}

4) Определяется класс Audi, который implement интерфейс Model. В нем определяется метод void track(String message) -
   метод выводит сообщение из 2-х фрагментов - "Audi " и склеенное с этими символами переданное значение сообщения message.
void track(String message) { model.track(message + "Audi");}

5) В методе psvm происходит в начале построение
       Vehicle vehicle = new Car(new Audi);
   а затем вызов метода track(String message) -
       vehicle.track();

   На экране в результате выполнения программы показывается сообщение "Car Audi"

---------------------------------------------------------------------------------------------------

!NB - в java 11 разрешено в интерфейсах делать default реализации методов